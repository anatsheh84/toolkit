<!DOCTYPE html>
<html>
<head>
  <title>{% if customer_name is defined %}{{ customer_name }} - {% endif %}Network Report - Job #{{ job_id | default('N/A') }}</title>
  <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Open+Sans" />
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <link rel="stylesheet" href="css/main.css">
  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<style>
  /* Enhanced styles for better navigation */
  .sticky-header {
    position: sticky;
    top: 0;
    z-index: 100;
    background: #2a2a2a;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
  }
  
  .control-panel {
    background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
    padding: 15px;
    margin: 20px 0;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.2);
  }
  
  .control-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 15px;
    margin-bottom: 10px;
  }
  
  .search-container {
    flex: 1;
    min-width: 300px;
  }
  
  .search-input {
    width: 100%;
    padding: 10px 15px;
    border: 2px solid #555;
    border-radius: 4px;
    background: rgba(255,255,255,0.95);
    font-size: 14px;
    transition: all 0.3s ease;
  }
  
  .search-input:focus {
    outline: none;
    border-color: #EE0000;
    box-shadow: 0 0 0 3px rgba(238, 0, 0, 0.1);
  }
  
  .filter-buttons {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  
  .filter-btn {
    padding: 8px 15px;
    background: #555;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 13px;
  }
  
  .filter-btn:hover {
    background: #666;
    transform: translateY(-1px);
  }
  
  .filter-btn.active {
    background: #EE0000;
  }
  
  .action-buttons {
    display: flex;
    gap: 10px;
  }
  
  .action-btn {
    padding: 8px 15px;
    background: #EE0000;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 13px;
    text-decoration: none;
    display: inline-block;
  }
  
  .action-btn:hover {
    background: #CC0000;
    transform: translateY(-1px);
  }
  
  .stats-bar {
    background: rgba(238, 0, 0, 0.1);
    padding: 10px 15px;
    border-radius: 4px;
    display: flex;
    gap: 20px;
    align-items: center;
    color: white;
    font-size: 13px;
  }
  
  .stat-item {
    display: flex;
    align-items: center;
    gap: 5px;
  }
  
  .stat-label {
    color: #ccc;
    text-transform: uppercase;
    font-size: 11px;
  }
  
  .stat-value {
    font-weight: bold;
    color: white;
  }
  
  /* Device status indicators */
  .device-status {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    margin-right: 8px;
    animation: pulse 2s infinite;
  }
  
  .status-up {
    background: #4CAF50;
  }
  
  .status-down {
    background: #f44336;
  }
  
  .status-unknown {
    background: #FFC107;
  }
  
  @keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.6; }
    100% { opacity: 1; }
  }
  
  /* Enhanced device sections */
  .device-row {
    border: 1px solid #444;
    margin-bottom: 10px;
    border-radius: 4px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .device-row.hidden {
    display: none !important;
  }
  
  .device-header {
    background: linear-gradient(135deg, #3a3a3a 0%, #2a2a2a 100%);
    padding: 10px 15px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .device-header:hover {
    background: linear-gradient(135deg, #4a4a4a 0%, #3a3a3a 100%);
  }
  
  .device-title {
    display: flex;
    align-items: center;
    gap: 10px;
    font-weight: bold;
    color: white;
  }
  
  .device-meta {
    display: flex;
    gap: 15px;
    color: #ccc;
    font-size: 12px;
  }
  
  .device-content {
    display: none;
    background: #1a1a1a;
    padding: 15px;
  }
  
  .device-content.expanded {
    display: block;
  }
  
  .expand-icon {
    transition: transform 0.3s ease;
    color: #ccc;
  }
  
  .expand-icon.rotated {
    transform: rotate(90deg);
  }
  
  /* Platform badges */
  .platform-badge {
    padding: 3px 8px;
    border-radius: 3px;
    font-size: 11px;
    text-transform: uppercase;
    font-weight: bold;
  }
  
  .platform-ios { background: #1976D2; }
  .platform-eos { background: #9C27B0; }
  .platform-junos { background: #00796B; }
  .platform-nxos { background: #F57C00; }
  
  /* Pagination */
  .pagination {
    display: flex;
    justify-content: center;
    gap: 5px;
    margin: 20px 0;
  }
  
  .page-btn {
    padding: 5px 10px;
    background: #444;
    color: white;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .page-btn:hover {
    background: #555;
  }
  
  .page-btn.active {
    background: #EE0000;
  }
  
  .page-btn:disabled {
    background: #333;
    cursor: not-allowed;
    opacity: 0.5;
  }
  
  /* Back to top button */
  .back-to-top {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: #EE0000;
    color: white;
    border: none;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    font-size: 20px;
    cursor: pointer;
    display: none;
    z-index: 1000;
    box-shadow: 0 2px 8px rgba(0,0,0,0.3);
    transition: all 0.3s ease;
  }
  
  .back-to-top:hover {
    background: #CC0000;
    transform: scale(1.1);
  }
  
  .back-to-top.visible {
    display: block;
  }
  
  /* Quick stats summary */
  .platform-summary {
    display: flex;
    gap: 15px;
    padding: 10px 0;
    flex-wrap: wrap;
  }
  
  .platform-stat {
    padding: 5px 10px;
    background: rgba(255,255,255,0.1);
    border-radius: 4px;
    font-size: 12px;
    color: white;
  }
  
  /* Clear filter button */
  .clear-filters {
    padding: 8px 15px;
    background: #666;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 13px;
  }
  
  .clear-filters:hover {
    background: #777;
  }
  
  /* Job info banner enhancement */
  .job-info-banner {
    background: rgba(238, 0, 0, 0.1);
    border: 1px solid #EE0000;
    border-radius: 4px;
    padding: 10px 20px;
    margin: 20px auto;
    max-width: 1200px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .job-info-item {
    color: #fff;
    margin: 5px 10px;
  }
  
  .job-info-label {
    color: #ccc;
    font-size: 12px;
    text-transform: uppercase;
    margin-right: 5px;
  }
  
  .job-info-value {
    color: #fff;
    font-weight: bold;
  }
  
  .back-to-archive {
    display: inline-block;
    margin: 20px;
    background: #EE0000;
    color: white !important;
    padding: 10px 15px;
    border-radius: 4px;
    text-decoration: none;
    font-size: 14px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    transition: all 0.3s ease;
  }
  
  .back-to-archive:hover {
    background: #CC0000;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
    color: white !important;
  }
  
  /* Hide elements for print */
  @media print {
    .control-panel, .back-to-top, .pagination {
      display: none !important;
    }
    .device-content {
      display: block !important;
    }
  }
</style>
<script>
// Enhanced JavaScript for navigation and filtering
$(document).ready(function() {
  // Initialize variables
  let activeFilters = [];
  let searchTerm = '';
  const devicesPerPage = 20;
  let currentPage = 1;
  
  // Initialize accordion with better settings
  $("#accordion > div").accordion({
    header: "h3",
    active: false,
    collapsible: true,
    heightStyle: "content"
  });
  
  // Device collapsible sections
  $('.device-header').click(function() {
    const content = $(this).next('.device-content');
    const icon = $(this).find('.expand-icon');
    
    content.toggleClass('expanded');
    icon.toggleClass('rotated');
  });
  
  // Main filter function that combines search and platform filters
  function applyAllFilters() {
    let visibleCount = 0;
    
    $('.device-row').each(function() {
      const $device = $(this);
      const devicePlatform = $device.data('platform');
      const deviceText = $device.text().toLowerCase();
      
      // Check search filter
      const matchesSearch = searchTerm === '' || deviceText.includes(searchTerm);
      
      // Check platform filter
      const matchesPlatform = activeFilters.length === 0 || activeFilters.includes(devicePlatform);
      
      // Show device only if it matches both filters
      if (matchesSearch && matchesPlatform) {
        $device.removeClass('hidden');
        visibleCount++;
      } else {
        $device.addClass('hidden');
      }
    });
    
    updateVisibleCount(visibleCount);
    currentPage = 1; // Reset to first page when filtering
    updatePagination();
  }
  
  // Search functionality
  $('#deviceSearch').on('keyup', function() {
    searchTerm = $(this).val().toLowerCase();
    applyAllFilters();
  });
  
  // Platform filtering
  $('.filter-btn').click(function() {
    const platform = $(this).data('platform');
    $(this).toggleClass('active');
    
    if (activeFilters.includes(platform)) {
      activeFilters = activeFilters.filter(f => f !== platform);
    } else {
      activeFilters.push(platform);
    }
    
    applyAllFilters();
  });
  
  // Clear all filters
  $('#clearFilters').click(function() {
    // Clear search
    $('#deviceSearch').val('');
    searchTerm = '';
    
    // Clear platform filters
    $('.filter-btn').removeClass('active');
    activeFilters = [];
    
    // Apply filters (which will show all)
    applyAllFilters();
  });
  
  // Expand/Collapse all
  $('#expandAll').click(function() {
    $('.device-row:not(.hidden) .device-content').addClass('expanded');
    $('.device-row:not(.hidden) .expand-icon').addClass('rotated');
  });
  
  $('#collapseAll').click(function() {
    $('.device-content').removeClass('expanded');
    $('.expand-icon').removeClass('rotated');
  });
  
  // Export functionality
  $('#exportBtn').click(function() {
    window.print();
  });
  
  // Back to top button
  $(window).scroll(function() {
    if ($(this).scrollTop() > 300) {
      $('.back-to-top').addClass('visible');
    } else {
      $('.back-to-top').removeClass('visible');
    }
  });
  
  $('.back-to-top').click(function() {
    $('html, body').animate({scrollTop: 0}, 'smooth');
  });
  
  // Pagination functions
  function updatePagination() {
    const $visibleDevices = $('.device-row:not(.hidden)');
    const totalDevices = $visibleDevices.length;
    const totalPages = Math.ceil(totalDevices / devicesPerPage);
    
    // First hide all devices
    $('.device-row').hide();
    
    // Show only the visible devices for current page
    const start = (currentPage - 1) * devicesPerPage;
    const end = start + devicesPerPage;
    $visibleDevices.slice(start, end).show();
    
    // Update pagination buttons
    updatePaginationButtons(totalPages);
  }
  
  function updatePaginationButtons(totalPages) {
    const $pagination = $('.pagination');
    $pagination.empty();
    
    if (totalPages <= 1) {
      return; // No pagination needed
    }
    
    // Previous button
    const $prevBtn = $('<button class="page-btn">←</button>');
    $prevBtn.prop('disabled', currentPage === 1);
    $prevBtn.click(function() { changePage(currentPage - 1); });
    $pagination.append($prevBtn);
    
    // Page numbers (show max 5 pages)
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, startPage + 4);
    
    if (endPage - startPage < 4) {
      startPage = Math.max(1, endPage - 4);
    }
    
    for (let i = startPage; i <= endPage; i++) {
      const $pageBtn = $(`<button class="page-btn ${i === currentPage ? 'active' : ''}">${i}</button>`);
      $pageBtn.click(function() { changePage(i); });
      $pagination.append($pageBtn);
    }
    
    // Next button
    const $nextBtn = $('<button class="page-btn">→</button>');
    $nextBtn.prop('disabled', currentPage === totalPages);
    $nextBtn.click(function() { changePage(currentPage + 1); });
    $pagination.append($nextBtn);
  }
  
  function changePage(page) {
    const $visibleDevices = $('.device-row:not(.hidden)');
    const totalPages = Math.ceil($visibleDevices.length / devicesPerPage);
    
    if (page >= 1 && page <= totalPages) {
      currentPage = page;
      updatePagination();
      // Scroll to top of device table
      $('html, body').animate({scrollTop: $('#deviceTable').offset().top - 100}, 'smooth');
    }
  }
  
  function updateVisibleCount(count) {
    const totalDevices = $('.device-row').length;
    $('#visibleCount').text(count);
    $('#filteredCount').text(count === totalDevices ? '' : ` (filtered from ${totalDevices})`);
  }
  
  // Initialize on page load
  applyAllFilters();
  updateVisibleCount($('.device-row').length);
});
</script>
</head>
<body>
  <div style="text-align: left; padding: 10px;">
    <a href="../../" class="back-to-archive">← Back to Archive</a>
  </div>
  
  {% include 'header.j2' %}
<section>
<center>
<h1>
  {% if customer_name is defined %}
  {{ customer_name }} Network Infrastructure Report
  {% else %}
  Ansible Network Automation Example Report
  {% endif %}
</h1>
<p class="report-subtitle">{{ customer_full_name | default('') }}</p>

<div class="job-info-banner">
  <div class="job-info-item">
    <span class="job-info-label">Job ID:</span>
    <span class="job-info-value">#{{ job_id | default('N/A') }}</span>
  </div>
  <div class="job-info-item">
    <span class="job-info-label">Generated:</span>
    <span class="job-info-value">{{ job_timestamp | default('N/A') }}</span>
  </div>
  <div class="job-info-item">
    <span class="job-info-label">Template:</span>
    <span class="job-info-value">{{ job_template_name | default('Manual Run') }}</span>
  </div>
  <div class="job-info-item">
    <span class="job-info-label">Devices:</span>
    <span class="job-info-value">{{ groups['network'] | length }}</span>
  </div>
</div>
</center>

<!-- Control Panel -->
<div class="control-panel sticky-header">
  <div class="control-row">
    <div class="search-container">
      <input type="text" id="deviceSearch" class="search-input" placeholder="🔍 Search devices by name, IP, platform, or serial...">
    </div>
    <div class="filter-buttons">
      {% set platforms = groups['network'] | map('extract', hostvars) | map(attribute='ansible_net_system') | unique | list %}
      {% for platform in platforms %}
      <button class="filter-btn" data-platform="{{ platform }}">
        <span class="platform-badge platform-{{ platform }}">{{ platform }}</span>
      </button>
      {% endfor %}
      <button id="clearFilters" class="clear-filters">Clear Filters</button>
    </div>
  </div>
  
  <div class="control-row">
    <div class="stats-bar">
      <div class="stat-item">
        <span class="stat-label">Showing:</span>
        <span class="stat-value"><span id="visibleCount">{{ groups['network'] | length }}</span> devices</span>
        <span id="filteredCount"></span>
      </div>
      <div class="platform-summary">
        {% for platform in platforms %}
        {% set count = groups['network'] | map('extract', hostvars) | selectattr('ansible_net_system', 'equalto', platform) | list | length %}
        <div class="platform-stat">
          {{ vendor[platform] | default(platform) }}: {{ count }}
        </div>
        {% endfor %}
      </div>
    </div>
    <div class="action-buttons">
      <button id="expandAll" class="action-btn">Expand All</button>
      <button id="collapseAll" class="action-btn">Collapse All</button>
      <button id="exportBtn" class="action-btn">Export/Print</button>
    </div>
  </div>
</div>

<!-- Device Table -->
<div id="deviceTable">
{% for network_switch in groups['network']|sort %}
{% if hostvars[network_switch].ansible_facts.network_resources is defined %}
{% set device_data = hostvars[network_switch] %}
{% set platform = device_data.ansible_net_system %}
<div class="device-row" data-platform="{{ platform }}" data-device="{{ network_switch }}">
  <div class="device-header">
    <div class="device-title">
      <span class="expand-icon">▶</span>
      <span class="device-status status-up"></span>
      <img class="router_image" src="router.png" alt="network device" style="width: 20px; height: 20px;">
      <span>{{ device_data.ansible_net_hostname }}</span>
      <span class="platform-badge platform-{{ platform }}">{{ vendor[platform] | default(platform) }}</span>
    </div>
    <div class="device-meta">
      <span>Model: {{ device_data.ansible_net_model }}</span>
      <span>Version: {{ device_data.ansible_net_version }}</span>
      <span>Serial: {{ device_data.ansible_net_serialnum }}</span>
    </div>
  </div>
  
  <div class="device-content">
    <table class="main_net_table">
      <thead>
        <tr>
          <th width="25%">Device Information</th>
          <th width="25%">Layer 1</th>
          <th width="25%">Layer 2</th>
          <th width="25%">Layer 3</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td class="summary_info">
            <div id="net_info_div">
              <table class="net_info">
              <tbody>
                <tr>
                  <td>Platform</td>
                  <td class="sub_net_info">{{ vendor[platform] }} {{ platform }}</td>
                </tr>
                <tr>
                  <td>Code Version</td>
                  <td class="sub_net_info">{{ device_data.ansible_net_version }}</td>
                </tr>
                <tr>
                  <td>Model</td>
                  <td class="sub_net_info">{{ device_data.ansible_net_model }}</td>
                </tr>
                <tr>
                  <td>Serial Number</td>
                  <td class="sub_net_info">{{ device_data.ansible_net_serialnum }}</td>
                </tr>
              </tbody>
              </table>
              {% with hostvars_item = device_data %}
              {% include 'ansible.j2' %}
              {% endwith %}
            </div>
          </td>
          <td>
            {% with hostvars_item = device_data %}
            {% include 'interfaces.j2' %}
            {% endwith %}
          </td>
          <td>
            {% with hostvars_item = device_data %}
            {% include 'vlans.j2' %}
            {% include 'lldp_interfaces.j2' %}
            {% include 'l2_interfaces.j2' %}
            {% endwith %}
          </td>
          <td>
            {% with hostvars_item = device_data %}
            {% include 'l3_interfaces.j2' %}
            {% include 'lacp.j2' %}
            {% include 'static.j2' %}
            {% include 'bgp.j2' %}
            {% include 'bgp_address_family.j2' %}
            {% include 'ospf.j2' %}
            {% endwith %}
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>
{% endif %}
{% endfor %}
</div>

<!-- Pagination -->
<div class="pagination"></div>

<!-- Back to Top Button -->
<button class="back-to-top" title="Back to top">↑</button>

<center>
<p>{% if customer_name is defined %}Report prepared for {{ customer_full_name | default(customer_name) }}<br>{% endif %}
<strong>Report Generated:</strong> {{ job_timestamp | default('N/A') }} | <strong>Job ID:</strong> #{{ job_id | default('N/A') }}<br><br>
Created with</p><br><img src="webpage_logo.png" width="300" alt="red hat ansible automation platform logo">
<p>The source code to create this report can be found at <a href="https://github.com/network-automation/toolkit">https://github.com/network-automation/toolkit</a><br><br>
If you are new to Ansible Automation check out the following links:<br>
<a href="https://docs.ansible.com/ansible/latest/user_guide/intro_getting_started.html">Getting Started</a><br>
<a target="_blank" href="https://ansible.com/workshops">Free hands-on workshops</a><br>
<a href="https://youtube.com/ansibleautomation">Youtube Videos</a><br>
</p>
</center>
</section>
</body>
</html>
