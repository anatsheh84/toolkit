---
- name: Gather minimal facts for timestamp
  ansible.builtin.setup:
    gather_subset:
      - "!all"
      - "!min"
      - "date_time"

- name: Set job ID and timestamp
  ansible.builtin.set_fact:
    # Try magic variables first, then environment variables for maximum compatibility
    job_id: "{{ tower_job_id | default(awx_job_id, true) | default(lookup('env', 'TOWER_JOB_ID'), true) | default(lookup('env', 'AWX_JOB_ID'), true) | default('manual_' + 99999999 | random | string, true) }}"
    job_timestamp: "{{ ansible_date_time.date }} {{ ansible_date_time.time }}"
    base_report_path: "{{ file_path }}"
    # Capture job template name from magic variables or environment
    job_template_name: "{{ tower_job_template_name | default(awx_job_template_name, true) | default(lookup('env', 'TOWER_JOB_TEMPLATE_NAME'), true) | default(lookup('env', 'AWX_JOB_TEMPLATE_NAME'), true) | default('Manual Run', true) }}"
    # Capture inventory name from magic variables or environment
    inventory_name: "{{ tower_inventory_name | default(awx_inventory_name, true) | default(lookup('env', 'TOWER_INVENTORY_NAME'), true) | default(lookup('env', 'AWX_INVENTORY_NAME'), true) | default('Local Inventory', true) }}"
    # Capture user information
    job_user: "{{ tower_user_name | default(awx_user_name, true) | default(ansible_user_id, true) | default('ansible') }}"

- name: Determine report view template
  ansible.builtin.set_fact:
    report_template: "{{ 'index_list.j2' if report_view_type | default('Card View') == 'List View' else 'index_card.j2' }}"

- name: Display selected view type
  ansible.builtin.debug:
    msg: "Using {{ report_view_type | default('Card View') }} for report archive (template: {{ report_template }})"

- name: Set job-specific report path
  ansible.builtin.set_fact:
    job_report_path: "{{ base_report_path }}/reports/job_{{ job_id }}"

- name: Creates base directory
  ansible.builtin.file:
    path: "{{ base_report_path }}"
    state: directory
    mode: "775"
    recurse: true

- name: Creates reports directory
  ansible.builtin.file:
    path: "{{ base_report_path }}/reports"
    state: directory
    mode: "775"

- name: Creates job-specific directory
  ansible.builtin.file:
    path: "{{ job_report_path }}"
    state: directory
    mode: "775"

# PERFORMANCE OPTIMIZATION: Replace heavy SELinux role with simple commands
- name: Check if SELinux is enabled
  ansible.builtin.command: getenforce
  register: selinux_status
  ignore_errors: true
  changed_when: false

- name: Set SELinux context for report directory (if SELinux is enabled)
  when: 
    - selinux_status.rc == 0
    - selinux_status.stdout != "Disabled"
  block:
    - name: Set SELinux file context
      ansible.builtin.command:
        cmd: "semanage fcontext -a -t httpd_sys_content_t '{{ base_report_path }}(/.*)?'"
      ignore_errors: true
      register: semanage_result
      changed_when: semanage_result.rc == 0

    - name: Apply SELinux context
      ansible.builtin.command:
        cmd: "restorecon -Rv {{ base_report_path }}"
      ignore_errors: true
      changed_when: false

- name: Ensure Nginx container is running
  containers.podman.podman_container:
    name: nginx_container
    image: docker.io/nginx:stable-alpine3.17-slim
    state: started
    ports:
      - "{{ web_port }}:80"
    volumes:
      - "{{ base_report_path }}:/usr/share/nginx/html:Z"
    recreate: true

- name: Create job-specific HTML report
  ansible.builtin.template:
    src: report.j2
    dest: "{{ job_report_path }}/index.html"
    mode: "644"

- name: Copy CSS to job directory
  ansible.builtin.copy:
    src: "css"
    dest: "{{ job_report_path }}"
    directory_mode: true
    mode: "775"

- name: Copy images to job directory
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ job_report_path }}"
    directory_mode: true
    mode: "644"
  loop:
    - "webpage_logo.png"
    - "redhat-ansible-logo.svg"
    - "router.png"

- name: Check if customer logo exists
  ansible.builtin.stat:
    path: "{{ role_path }}/files/{{ customer_logo }}"
  register: logo_file
  delegate_to: localhost
  when: 
    - show_customer_logo | default(false)
    - customer_logo is defined

- name: Copy customer logo to job directory if exists
  ansible.builtin.copy:
    src: "{{ customer_logo }}"
    dest: "{{ job_report_path }}/{{ customer_logo }}"
    mode: "644"
  when: 
    - show_customer_logo | default(false)
    - customer_logo is defined
    - logo_file.stat.exists | default(false)

- name: Create report metadata file
  ansible.builtin.copy:
    content: |
      {
        "job_id": "{{ job_id }}",
        "timestamp": "{{ job_timestamp }}",
        "customer": "{{ customer_name | default('Network') }}",
        "generated_by": "{{ job_user }}",
        "tower_job_id": "{{ tower_job_id | default('') }}",
        "awx_job_id": "{{ awx_job_id | default('') }}",
        "job_template": "{{ job_template_name }}",
        "awx_job_template": "{{ job_template_name }}",
        "inventory": "{{ inventory_name }}",
        "view_type": "{{ report_view_type | default('Card View') }}",
        "playbook_name": "{{ playbook_name | default('network_report.yml') }}",
        "execution_node": "{{ ansible_hostname | default('localhost') }}",
        "ansible_version": "{{ ansible_version.full | default('N/A') }}"
      }
    dest: "{{ job_report_path }}/metadata.json"
    mode: "644"

# PERFORMANCE OPTIMIZATION: Simplified report processing
- name: Get list of all report directories
  ansible.builtin.find:
    paths: "{{ base_report_path }}/reports"
    file_type: directory
    patterns: "job_*"
  register: report_dirs

# PERFORMANCE OPTIMIZATION: Limit reports to process
- name: Sort and limit reports to process
  ansible.builtin.set_fact:
    reports_to_process: "{{ (report_dirs.files | sort(attribute='mtime', reverse=true))[:max_reports_to_display | default(30)] }}"

- name: Read metadata from limited reports
  ansible.builtin.slurp:
    src: "{{ item.path }}/metadata.json"
  register: report_metadata
  loop: "{{ reports_to_process }}"
  # Don't retry on failures - skip missing files immediately
  ignore_errors: true
  failed_when: false

- name: Create reports data structure (with error handling)
  ansible.builtin.set_fact:
    all_reports: "{{ all_reports | default([]) + [{'path': item.item.path | basename, 'metadata': item.content | b64decode | from_json}] }}"
  loop: "{{ report_metadata.results }}"
  when: 
    - item.content is defined
    - item.failed is false or item.failed is not defined

- name: Sort reports by timestamp (newest first)
  ansible.builtin.set_fact:
    sorted_reports: "{{ all_reports | default([]) | sort(attribute='metadata.timestamp', reverse=true) }}"

- name: Create index page with selected view type
  ansible.builtin.template:
    src: "{{ report_template }}"
    dest: "{{ base_report_path }}/index.html"
    mode: "644"

# PERFORMANCE OPTIMIZATION: Check if static files need updating
- name: Check if CSS exists in base directory
  ansible.builtin.stat:
    path: "{{ base_report_path }}/css"
  register: css_exists

- name: Copy CSS to base directory for index (if needed)
  ansible.builtin.copy:
    src: "css"
    dest: "{{ base_report_path }}"
    directory_mode: true
    mode: "775"
  when: not css_exists.stat.exists

# PERFORMANCE OPTIMIZATION: Copy images only if they don't exist or are older
- name: Copy images to base directory for index
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ base_report_path }}"
    directory_mode: true
    mode: "644"
    # Only copy if destination doesn't exist or source is newer
    force: no
  loop:
    - "webpage_logo.png"
    - "redhat-ansible-logo.svg"
    - "router.png"

- name: Copy customer logo to base directory if exists
  ansible.builtin.copy:
    src: "{{ customer_logo }}"
    dest: "{{ base_report_path }}/{{ customer_logo }}"
    mode: "644"
    force: no
  when: 
    - show_customer_logo | default(false)
    - customer_logo is defined
    - logo_file.stat.exists | default(false)

- name: Create latest report symlink
  ansible.builtin.file:
    src: "reports/job_{{ job_id }}"
    dest: "{{ base_report_path }}/latest"
    state: link
    force: true

- name: Display logo status
  ansible.builtin.debug:
    msg: "Note: Customer logo file '{{ customer_logo }}' not found. Add it to roles/build_report_container/files/ to display logo."
  when:
    - show_customer_logo | default(false)
    - customer_logo is defined
    - not (logo_file.stat.exists | default(false))

# PERFORMANCE OPTIMIZATION: Use local fact instead of external curl
- name: Get server network info
  ansible.builtin.setup:
    gather_subset:
      - network
  when: ansible_default_ipv4 is not defined

- name: Set report URL
  ansible.builtin.set_fact:
    report_url: "http://{{ ansible_default_ipv4.address | default(ansible_fqdn) }}:{{ web_port }}"

- name: Display link to reports
  ansible.builtin.debug:
    msg:
      - "=================================================="
      - "Network Report Archive Available At:"
      - "Main Index: {{ report_url }}"
      - "This Report: {{ report_url }}/reports/job_{{ job_id }}"
      - "Latest Report: {{ report_url }}/latest"
      - "=================================================="
      - "Job Template: {{ job_template_name }}"
      - "Inventory: {{ inventory_name }}"
      - "Generated By: {{ job_user }}"
      - "View Type: {{ report_view_type | default('Card View') }}"
      - "Reports Displayed: {{ sorted_reports | length }} (max: {{ max_reports_to_display | default(30) }})"
